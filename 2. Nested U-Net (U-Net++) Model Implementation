import tensorflow as tf
from tensorflow.keras import layers, Model

def conv_block(x, num_filters):
    x = layers.Conv2D(num_filters, 3, padding='same')(x)
    x = layers.BatchNormalization()(x)
    x = layers.Activation('relu')(x)
    x = layers.Conv2D(num_filters, 3, padding='same')(x)
    x = layers.BatchNormalization()(x)
    x = layers.Activation('relu')(x)
    return x

def nested_unet(input_shape):
    inputs = layers.Input(input_shape)
    
    # Encoder
    conv1 = conv_block(inputs, 64)
    pool1 = layers.MaxPooling2D(pool_size=(2, 2))(conv1)
    
    conv2 = conv_block(pool1, 128)
    pool2 = layers.MaxPooling2D(pool_size=(2, 2))(conv2)
    
    conv3 = conv_block(pool2, 256)
    pool3 = layers.MaxPooling2D(pool_size=(2, 2))(conv3)
    
    # Decoder (Nested part with skip connections)
    conv4 = conv_block(pool3, 512)
    
    up1 = layers.UpSampling2D(size=(2, 2))(conv4)
    merge1 = layers.concatenate([conv3, up1], axis=3)
    conv5 = conv_block(merge1, 256)
    
    up2 = layers.UpSampling2D(size=(2, 2))(conv5)
    merge2 = layers.concatenate([conv2, up2], axis=3)
    conv6 = conv_block(merge2, 128)
    
    up3 = layers.UpSampling2D(size=(2, 2))(conv6)
    merge3 = layers.concatenate([conv1, up3], axis=3)
    conv7 = conv_block(merge3, 64)
    
    outputs = layers.Conv2D(1, (1, 1), activation='sigmoid')(conv7)
    
    model = Model(inputs, outputs)
    return model
